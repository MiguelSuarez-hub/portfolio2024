---
const LANGUAGES = [
  { id: "en-US", label: "English", prefix: "en" },
  { id: "es-CO", label: "Spanish", prefix: "es" },
];

---

<div class="relative flex items-center mr-3">
  <button
    transition:persist
    id="language-toggle-btn"
    class="appearance-none border-none flex hover:scale-110 transition"
  >
    <span class="sr-only">Choose the language</span>
    <p id="en-US" class="language-text transition-all">EN</p>
    <p id="es-CO" class="language-text transition-all">ES</p>
  </button>
  <div
    transition:persist
    id="languages-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        LANGUAGES.map((language) => (
          <li
            id={language.id}
            class="languages-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm"
          >
            <a href={`/${language.prefix}/`}>{language.label}</a>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #languages-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  const language = window.navigator.language;
  const languagesMenu = document.getElementById("languages-menu");

  const getLanguagePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("language") === "spanish" ? "es-CO" : "en-US";
    }

    return language === "es-CO" ? language : "en-US";
  };

  const updateText = (languagePreference) => {
    document.querySelectorAll(".language-text").forEach((element) => {
      element.style.display = element.id === languagePreference ? "block" : "none";
    });
  };

  const updateLanguage = () => {
    const languagePreference = getLanguagePreference();
    const isES = languagePreference === "es-CO" ? "es" : "en";

    updateText(languagePreference);
    document.documentElement.setAttribute("lang", isES);
  };

  updateLanguage();

  document.addEventListener("click", () =>
    languagesMenu.classList.remove("open")
  );

  document
    .getElementById("language-toggle-btn")
    .addEventListener("click", (e) => {
      e.stopPropagation();
      const isClosed = !languagesMenu.classList.contains("open");
      languagesMenu.classList[isClosed ? "add" : "remove"]("open");
    });

  document.querySelectorAll(".languages-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      localStorage.setItem("language", e.target.innerText.toLowerCase().trim());
      updateLanguage();
    });
  });

  document.addEventListener("astro:after-swap", () => {
    updateLanguage();
    window.scrollTo({ left: 0, top: 0, behavior: "instant" });
  });
</script>
